// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid_user           String   @id @default(uuid())
  ra_user            Float    @unique @db.Real
  name_user          String   @db.VarChar(150)
  gender_user        String   @db.Char(1)
  cpf_cnpj_user      String   @unique
  tel_cel_user       String   @db.Char(15)
  tel_res_user       String   @db.Char(14)
  endereco_user      String   @db.VarChar(80)
  numero_user        String   @db.VarChar(10)
  bairro_user        String   @db.VarChar(40)
  complemento_user   String   @db.VarChar(50)
  cep_user           String   @db.VarChar(9)
  cidade_user        String   @db.VarChar(50)
  uf_user            String   @db.Char(2)
  email_user         String   @unique @db.VarChar(100)
  dt_nascimento_user DateTime
  dt_matricula_user  DateTime
  situacao_user      Boolean  @default(true) @db.Boolean
  senha              String
  avatar             String   @default("") @db.VarChar(180)
  tipo_user          String   @default("S") @db.Char(1)
  roles              Roles    @default(student)

  UserToken         UserToken[]
  ClassUser         ClassUser[]
  DetailActivity    DetailActivity[]
  ClassNotice       ClassNotice[]
  ClassNoticeAnswer ClassNoticeAnswer[]
  ActivityComment   ActivityComment[]

  @@map("user")
}

enum Roles {
  student
  teacher
  admin
}

model UserToken {
  uid_user_token String   @id @default(uuid())
  refresh_token  String
  expires_date   DateTime
  created_at     DateTime @default(now())
  user_uid       String
  user           User     @relation(fields: [user_uid], references: [uid_user])

  @@map("user_token")
}

model Class {
  uid_class         String   @id @default(uuid())
  name_class        String   @db.VarChar(150)
  name_matter_class String   @db.VarChar(150)
  background_class  String   @db.VarChar(180)
  isArchive         Boolean  @default(false) @db.Boolean
  createdAt_class   DateTime @default(now())
  updatedAt_class   DateTime @updatedAt

  ClassUser        ClassUser[]
  CategoryActivity CategoryActivity[]
  Activity         Activity[]
  ClassNotice      ClassNotice[]

  @@map("class")
}

model ClassUser {
  id_class_user Int    @id @default(autoincrement())
  class_uid     String
  class         Class  @relation(fields: [class_uid], references: [uid_class])
  user_uid      String
  user          User   @relation(fields: [user_uid], references: [uid_user])

  @@map("class_user")
}

model CategoryActivity {
  id_category_activity   Int    @id @default(autoincrement())
  name_category_activity String @db.VarChar(100)
  tipo_category_activity String @db.Char(1)
  class_uid              String
  class                  Class  @relation(fields: [class_uid], references: [uid_class])

  Activity Activity[]

  @@map("category_activity")
}

model Activity {
  uid_activity               String           @id @default(uuid())
  name_activity              String           @db.VarChar(100)
  content_activity           String
  dt_entrega_activity        DateTime
  isAcceptWithDelay_Activity Boolean          @default(false) @db.Boolean
  nota_max_activity          Int
  isEntregue_activity        Boolean          @default(false) @db.Boolean
  createdAt_activity         DateTime         @default(now())
  updatedAt_activity         DateTime         @updatedAt
  class_uid                  String
  class                      Class            @relation(fields: [class_uid], references: [uid_class])
  category_activity_id       Int
  category_activity          CategoryActivity @relation(fields: [category_activity_id], references: [id_category_activity])

  MaterialActivity MaterialActivity[]
  DetailActivity   DetailActivity[]
  ActivityComment  ActivityComment[]

  @@map("activity")
}

model MaterialActivity {
  id_material_activity   Int      @id @default(autoincrement())
  link_material_activity String   @db.VarChar(180)
  name_material_activity String   @default("") @db.VarChar(100)
  size_material_activity Int      @default(0)
  tipo_material_activity String   @default("M") @db.Char(1)
  activity_uid           String
  activity               Activity @relation(fields: [activity_uid], references: [uid_activity])

  @@map("material_activity")
}

model DetailActivity {
  id_detail_activity            Int      @id @default(autoincrement())
  dt_isEntrega_detail_acitivity DateTime
  nota_user                     Decimal  @default(0.00)
  activity_uid                  String
  activity                      Activity @relation(fields: [activity_uid], references: [uid_activity])
  user_uid                      String
  user                          User     @relation(fields: [user_uid], references: [uid_user])

  MaterialDetailActivity MaterialDetailActivity[]

  @@map("detail_activity")
}

model MaterialDetailActivity {
  id_material_detail_activity   Int            @id @default(autoincrement())
  link_material_detail_activity String         @db.VarChar(180)
  name_material_detail_activity String         @default("") @db.VarChar(100)
  size_material_detail_activity Int            @default(0)
  detail_activity_id            Int
  detail_activity               DetailActivity @relation(fields: [detail_activity_id], references: [id_detail_activity])

  @@map("material_detail_activity")
}

model ClassNotice {
  id_class_notice        Int      @id @default(autoincrement())
  message                String   @db.VarChar(250)
  createdAt_class_notice DateTime @default(now())
  user_uid               String
  user                   User     @relation(fields: [user_uid], references: [uid_user])
  class_uid              String
  class                  Class    @relation(fields: [class_uid], references: [uid_class])

  ClassNoticeAnswer ClassNoticeAnswer[]

  @@map("class_notice")
}

model ClassNoticeAnswer {
  id_class_notice_answer        Int         @id @default(autoincrement())
  message                       String      @db.VarChar(250)
  createdAt_class_notice_answer DateTime    @default(now())
  user_uid                      String
  user                          User        @relation(fields: [user_uid], references: [uid_user])
  class_notice_id               Int
  class_notice                  ClassNotice @relation(fields: [class_notice_id], references: [id_class_notice])

  @@map("class_notice_answer")
}

model ActivityComment {
  id_private_comment        Int      @id @default(autoincrement())
  message                   String   @db.VarChar(250)
  createdAt_private_comment DateTime @default(now())
  user_uid                  String
  user                      User     @relation(fields: [user_uid], references: [uid_user])
  activity_uid              String
  activity                  Activity @relation(fields: [activity_uid], references: [uid_activity])

  @@map("activity_comment")
}
